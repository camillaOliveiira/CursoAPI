{
	"info": {
		"_postman_id": "d835889a-9d97-49cf-b293-449dc421f96c",
		"name": "CursoAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37919049"
	},
	"item": [
		{
			"name": "PegaTodosClientes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080",
					"host": [
						"localhost"
					],
					"port": "8080"
				}
			},
			"response": []
		},
		{
			"name": "PostaNovoCliente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Basic dXNlcm5hbWU6UGFzc3dvcmQx",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nome\": \"Camila\",\r\n    \"idade\": 34,\r\n    \"id\": \"001\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/cliente",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cliente"
					]
				}
			},
			"response": []
		},
		{
			"name": "AtualizaCliente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Camila\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains objects with keys '1' and '2'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('1');\r",
							"    pm.expect(responseData).to.have.property('2');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the 'nome' and 'idade' fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"\r",
							"    Object.keys(responseData).forEach(function(key) {\r",
							"        pm.expect(responseData[key].nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"        pm.expect(responseData[key].idade).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");\r",
							"    });\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Risco field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    Object.values(responseData).forEach(cliente => {\r",
							"        pm.expect(cliente.risco).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure that the response body contains valid 'id' values for each object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    Object.keys(responseData).forEach(function(key) {\r",
							"        pm.expect(responseData[key].id).to.be.a('number');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Basic dXNlcm5hbWU6UGFzc3dvcmQx",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nome\": \"Camila S.\",\r\n    \"idade\": 29,\r\n    \"id\": \"001\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/cliente",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cliente"
					]
				}
			},
			"response": []
		},
		{
			"name": "ApagaCliente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Basic dXNlcm5hbWU6UGFzc3dvcmQx",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/cliente/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cliente",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}